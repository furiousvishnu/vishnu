# -*- coding: utf-8 -*-
"""ml thyroid project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CjQyjLSwEJo4_UOLbpELn6LBtZ5wq90j
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data=pd.read_csv('/content/thyroidDF.csv')

data.head()

data['target'].unique()

data.shape

data.info()

data.isnull().sum()

data.drop(['TSH_measured','T3_measured','TT4_measured','T4U_measured','FTI_measured','TBG_measured','referral_source','patient_id'], axis=1,inplace=True)

data.head()

data['target']

diagnoses={'A': 'hyperthyroid conditions',
          'B': 'hyperthyroid conditions',
          'C': 'hyperthyroid conditions',
          'D': 'hyperthyroid conditions',
          'E': 'hypothyroid conditions',
          'F': 'hypothyroid conditions',
          'G': 'hypothyroid conditions',
          'H': 'hypothyroid conditions',
          'I': 'binding protein' ,
          'J': 'binding protein',
          'K': 'general health',
          'L': 'replacement therapy',
          'M': 'replacement therapy',
          'N': 'replacement therapy',
          'O': 'antiyhyroid treatment',
          'P': 'antiyhyroid treatment',
          'Q': 'antiyhyroid treatment',
          'R': 'miscellaneous',
          'S': 'miscellaneous',
          'T': 'miscellaneous'}
data['target']=data['target'].map(diagnoses)

data

data.isnull().sum()

data.dropna(subset=['target'],inplace=True)

data['target'].value_counts()

data['target'].isnull().sum()

data.head()

data.describe()

data[data.age>100]

data['age']=np.where((data.age>100),np,data.age)

data

x=data.iloc[:,0:-1]
y=data.iloc[:,-1]

data.isnull().sum()

x['sex'].unique()

x['sex'].replace(np.nan,'F',inplace=True)

x['sex'].replace(np.nan,'F',inplace=True)

x['sex'].value_counts()

x.isnull().sum()

data.info()

x['age']=x['age'].astype('float')
x['TSH']=x['TSH'].astype('float')
x['T3']=x['T3'].astype('float')
x['TT4']=x['TT4'].astype('float')
x['T4U']=x['T4U'].astype('float')
x['FTI']=x['FTI'].astype('float')
x['TBG']=x['TBG'].astype('float')

from sklearn.preprocessing import OrdinalEncoder, LabelEncoder
ordinal_encoder=OrdinalEncoder(dtype='int64')
x.iloc[:,1:16]=ordinal_encoder.fit_transform(x.iloc[:,1:16])

x.head()

x.replace(np.nan,'0',inplace=True)
x.head()

label_encoder=LabelEncoder()
y_dt=label_encoder.fit_transform(y)

y=pd.DataFrame(y_dt,columns=['target'])
y

y.value_counts(normalize=True)

import seaborn as sns
corrmat=x.corr()
f,ax=plt.subplots(figsize=(9,8))
sns.heatmap(corrmat,ax=ax,cmap="YlGnBu",linewidths=0.1)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)

y_train.value_counts()

from imblearn.over_sampling import SMOTE
os=SMOTE(random_state=0,k_neighbors=1)
x_bal,y_bal=os.fit_resample(x_train,y_train)
x_test_bal,y_test_bal=os.fit_resample(x_test,y_test)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_bal=sc.fit_transform(x_bal)
x_test_bal=sc.transform(x_test_bal)

x_bal

x_test_bal

y_bal.value_counts()

columns=['age',	'sex'	,'on_thyroxine','query_on_thyroxine','on_antithyroid_meds',	'sick',	'pregnant',	'thyroid_surgery','I131_treatment',	'query_hypothyroid','goitre',	'tumor',	'hypopituitary',	'psych',	'TSH',	'T3',	'TT4',	'T4U',	'FTI',	'TBG','target','patient id']

x_test_bal=pd.DataFrame(x_test_bal,columns=columns)

x_bal=pd.DataFrame(x_bal,columns=columns)

x_bal

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,classification_report
rfr=RandomForestClassifier().fit(x_bal,y_bal)
y_pred=rfr.predict(x_test_bal)
accuracy_score(y_test_bal,y_pred)
x_bal.shape,y_bal.shape,x_test_bal.shape,y_test_bal.shape

test_score=accuracy_score(y_test_bal,y_pred)
test_score

train_score=accuracy_score(y_bal,rfr.predict(x_bal))
train_score

from sklearn.inspection import permutation_importance
results=permutation_importance(rfr,x_bal,y_bal,scoring='accuracy')

feature_importance=['age',	'sex'	,'on_thyroxine','query_on_thyroxine','on_antithyroid_meds',	'sick',	'pregnant',	'thyroid_surgery','I131_treatment',	'query_hypothyroid','goitre',	'tumor',	'hypopituitary',	'psych',	'TSH',	'T3',	'TT4',	'T4U',	'FTI',	'TBG','target','patient id']
importance=results.importances_mean
importance=np.sort(importance)
for i,v in enumerate(importance):
  i=feature_importance[i]
  print('feature:{:<20} score:{}'.format(i,v))

plt.figure(figsize=(10,10))
plt.bar(x=feature_importance,height=importance)
plt.xticks(rotation=30,ha='right')
plt.show()

x_bal.head()

x_test_bal.head()

rfr1=RandomForestClassifier()
rfr1.fit(x_bal,y_bal)
y_pred=rfr1.predict(x_test_bal)

print(classification_report(y_test_bal,y_pred))

train_score=accuracy_score(y_bal,rfr1.predict(x_bal))

train_score

from xgboost import XGBClassifier
xgb=XGBClassifier()
xgb.fit(x_bal,y_bal)

y_pred=xgb.predict(x_test_bal)

print(classification_report(y_test_bal,y_pred))

train_score=accuracy_score(y_bal,xgb.predict(x_bal))

train_score

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score,classification_report
sv=SVC()

sv.fit(x_bal,y_bal)

y_pred=sv.predict(x_test_bal)

print(classification_report(y_test_bal,y_pred))

train_score=accuracy_score(y_bal,sv.predict(x_bal))
train_score

import pickle
pickle.dump(xgb,open('thyroid_l_model.pkl','wb'))

type(features)

pickle.dump(label_encoder,open('label_encoder.pkl','wb'))

data['target'].unique()

y['target'].unique()